#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 12345

void token_ring(int socket) {
    int token = 1;
    int next_socket;

    while (1) {
        // Receive the token from the previous node
        recv(socket, &token, sizeof(token), 0);
        printf("Received token: %d\n", token);

        // Process the token (e.g., send data, perform some task)
        // ...

        // Send the token to the next node
        printf("Passing token...\n");
        next_socket = (socket + 1) % 3; // Assuming 3 nodes
        send(next_socket, &token, sizeof(token), 0);

        // Delay to simulate work being done
        usleep(1000000); // 1 second
    }
}

int main() {
    int server_fd, client_socket;
    struct sockaddr_in server_addr, new_addr;
    socklen_t addr_size;

    // Create a socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd < 0) {
        perror("Socket error");
        exit(1);
    }

    // Configure the server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    // Bind the socket to the address
    if (bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind error");
        exit(1);
    }

    // Listen for incoming connections
    if (listen(server_fd, 3) == 0) {
        printf("Listening...\n");
    } else {
        perror("Listening failed");
        exit(1);
    }

    addr_size = sizeof(new_addr);

    // Accept connections from clients
    for (int i = 0; i < 3; i++) { // Assuming 3 nodes
        client_socket = accept(server_fd, (struct sockaddr*)&new_addr, &addr_size);
        printf("Connected to Node %d\n", i);
        token_ring(client_socket);
    }

    close(server_fd);

    return 0;
}
